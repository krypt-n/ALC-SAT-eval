#!/usr/bin/env python

import os

import argparse
import signal

from ontolearn.concept_learner import EvoLearner
from ontolearn.knowledge_base import KnowledgeBase
from owlapy.owl_individual import OWLNamedIndividual, IRI


import logging
from ontolearn.learning_problem import PosNegLPStandard
from owlapy.render import DLSyntaxObjectRenderer


logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(message)s')
_log = logging.getLogger()


def read_pos_neg_examples(file_pos, file_neg):
    pos = []
    neg = []

    # pos
    with open(file_pos) as in_file:
        for line in in_file:
            line = line.strip()

            if line:
                pos.append(line)

    # neg
    with open(file_neg) as in_file:
        for line in in_file:
            line = line.strip()

            if line:
                neg.append(line)

    return pos, neg

def read_config(path):
    settings = {}
    with open(path) as file:
        prop_list = [line.split("=") for line in file.readlines()]
        settings = {key.strip(): value.strip() for key, value in prop_list}

    return settings

def best_hypotheses(evo):
    prediction = evo.best_hypotheses(n = 1, return_node=True)    
    rdr = DLSyntaxObjectRenderer()
    return rdr.render(prediction.concept)

def handler(signum, frame):
    _log.debug('Interrupting EvoLearner Training Process')
    raise Exception('Maximum Execution Time Limit Reached for EvoLearner')

if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument('config_file')
    args = argparser.parse_args()

    cfg = read_config(args.config_file)

    learning_task_id = cfg['learningtask']
    learning_problem_id = cfg['learningproblem']
    _log.debug('Running learning task %s with learning problem %s' % (
        learning_task_id, learning_problem_id))

    target_dir = cfg['filename.workdir']
    output_file = cfg['filename.output']
    max_exec_time = cfg['maxExecutionTime']
    output_file_path = os.path.join(target_dir, output_file)

    _log.debug('Target dir is %s' % target_dir)

    learning_task_dir_name = 'learningtasks'
    owl_dir_name = 'owl'
    data_dir_name = 'data'
    data_dir = os.path.join('..', '..', learning_task_dir_name, learning_task_id, owl_dir_name, data_dir_name)

    f_name = os.listdir(data_dir)[0]
    if f_name.endswith('.owl'):
        owl_file_path = os.path.join(data_dir, f_name)
        _log.debug('Path to OWL KnowledgeBase is %s' % owl_file_path)
    else:
    	_log.debug('No OWL KnowledgeBase found on path %s' % f_name)
    
    pos_examples, neg_examples = read_pos_neg_examples(cfg['filename.pos'], cfg['filename.neg'])
    loading_time = 20
    actual_train_time = int(max_exec_time) - loading_time
    signal.signal(signal.SIGALRM, handler)

    # Code for running evolearner
    kb = KnowledgeBase(path=owl_file_path, include_implicit_individuals=True)

    typed_pos = set(map(OWLNamedIndividual, map(IRI.create, pos_examples)))
    typed_neg = set(map(OWLNamedIndividual, map(IRI.create, neg_examples)))
    lp = PosNegLPStandard(pos=typed_pos, neg=typed_neg)



    evo = EvoLearner(kb, terminate_on_goal=False,  max_runtime=int(actual_train_time), 
        num_generations=2000,
        use_card_restrictions=False,
        use_data_properties=False)


    signal.alarm(actual_train_time)
    try:
        _log.debug('Log Output before calling the fit function')
        evo.fit(lp, verbose = True)
    except Exception as exc: 
        _log.debug(exc)
    finally:
        signal.alarm(0)

    best = best_hypotheses(evo)

    with open(output_file_path, 'w') as out:
        out.write(str(best) + "\n")

    _log.debug('EvoLearner run finished.')
    _log.debug('Results written to %s' % output_file_path)
